package org.aertslab.grnboost.util

import org.scalatest.{FlatSpec, Matchers}
import org.aertslab.grnboost.util.Elbow.toElbowGroups

/**
  * @author Thomas Moerman
  */
class ElbowSpec extends FlatSpec with Matchers {

  behavior of "Kneedle algo"

  it should "work for Malat1" in {
    val y = Array(
      9.6057114E8, 4.3428688E8, 3.67728E8, 8.6315888E7, 6.9775696E7, 5.757678E7, 5.2942544E7, 4.4931208E7, 4.258026E7,
      4.1267528E7, 3.27586E7, 3.2129E7, 2.96166E7, 2.889363E7, 2.740809E7, 2.708909E7, 2.693416E7, 1.83578E7, 1.646049E7,
      1.43294E7, 1.425031E7, 1.312982E7, 1.250337E7, 1.201629E7, 1.09442E7, 1.02277E7, 9683780.0, 9594280.0, 9203640.0,
      8769540.0, 8578480.0, 8344140.0, 8256690.0, 8003580.0, 7682190.0, 6809360.0, 6062530.0, 5924200.0, 5812370.0,
      5684530.0, 5263220.0, 5255700.0, 5244540.0, 5149680.0, 4651880.0, 4646410.0, 4634300.0, 4633660.0, 4488310.0,
      4442390.0, 4406660.0, 4105080.0, 4027350.0, 3984360.0, 3902710.0, 3861890.0, 3806480.0, 3703310.0, 3632880.0,
      3608410.0, 3515740.0, 3479890.0, 3375980.0, 3234450.0, 3192080.0, 3124840.0, 3061080.0, 3021410.0, 2551210.0)

    Elbow(y) shouldBe List(4)
  }

  it should "work for Plp1" in {
    val y = Array(6.1088109E8, 6.789664E7, 2.9227E7, 7838675.5, 4849463.0, 4688940.0, 2948540.0, 2774853.0, 2518375.2,
      2464648.0, 1905366.0, 1848443.0, 1531734.8, 1323370.0, 1201540.0, 1138710.0, 1115114.9, 1043890.0, 970468.0,
      903898.0, 894904.0, 806773.0, 802922.0, 794441.0, 789028.0, 770592.0, 754424.0, 739064.0, 706739.0, 686247.0,
      39998.0, 586895.0, 569454.0, 557095.0, 552555.1, 551144.0, 550707.0, 518542.0, 512913.0, 509769.7, 506560.0,
      504762.0, 485205.0, 484746.0, 480243.0, 458425.0, 449971.0, 445634.0, 434771.0, 429121.0, 420876.0, 420792.0,
      400684.0, 395797.0, 395203.0, 394520.0, 332377.0, 326290.0, 324413.0, 306108.0, 290008.0, 281877.0, 277879.0,
      254837.0, 254780.0, 246330.0, 236240.0, 209310.3, 206505.0, 197553.0, 189387.0, 185197.0, 181773.0, 159570.0,
      157752.0, 157460.0)

    Elbow(y) shouldBe List(3)
  }

  it should "work for Dlx2" in {
    val y = Array(1263.1158, 271.61798, 224.00446, 196.8664, 139.6801, 135.4042, 132.002, 99.850235, 94.115906, 85.2321,
      82.59019, 72.231, 65.175, 57.09108, 53.684303, 51.9896, 51.134903, 49.7382, 41.517403, 40.7518, 40.2288, 36.8258,
      36.3279, 30.6573, 27.9472, 26.7032, 26.4758, 26.25367, 25.9517, 25.2661, 22.8744, 20.9172, 20.62911, 20.0309,
      19.5476, 19.217289, 18.5731, 17.5505, 17.2601, 17.01509, 14.908, 13.2224, 13.0602, 12.4823, 12.0606, 11.3357,
      11.2974, 11.2634, 11.0549, 10.7688, 9.41903, 9.33632, 9.24803, 7.9093, 7.39382, 5.53756, 5.41428, 5.0246, 4.60488,
      4.31194, 3.21423, 3.17762, 3.08699, 2.67289, 2.5579, 2.4921, 1.52926, 1.12223, 0.936489, 0.41906, 0.364906)

    Elbow(y) shouldBe List(4, 7)
  }

  it should "work for Kcnip1" in {
    val y = Array(16066.539, 7375.0376, 3614.008, 3388.121, 2420.4148, 769.3241, 735.7328, 690.605, 593.808, 528.4582,
      467.45874, 465.8117, 434.935, 422.94702, 385.443, 334.41638, 319.878, 299.905, 291.58636, 242.53, 231.686, 224.97,
      216.203, 210.012, 208.6947, 207.75, 190.70769, 188.5027, 186.67789, 185.2395, 184.275, 174.5755, 153.836, 149.087,
      146.0959, 137.554, 126.103, 123.8266, 118.507, 115.86, 112.151, 109.062, 102.533005, 100.596, 95.652, 93.4778,
      84.0669, 83.2826, 78.3114, 76.7129, 75.3362, 74.6806, 70.1246, 67.6098, 65.1391, 64.8184, 62.8652, 56.73348,
      53.6351, 50.2008, 49.153, 42.990532, 42.9546, 42.9101, 42.4446, 41.7664, 40.0001, 36.3275, 33.9007, 33.1833,
      31.6034, 28.0721, 25.4633, 23.8836, 20.6222, 20.2263, 19.6476, 18.5002, 17.9151, 17.5321, 13.6905, 13.473041,
      11.5317)

    Elbow(y) shouldBe(List(5))
  }

  it should "work for Sox10" in {
    val y = Array(4089.6057, 1447.7776, 1019.5271, 1004.7967, 402.5402, 250.5838, 179.308, 177.036, 166.44751, 158.11,
      151.893, 150.878, 150.071, 147.1268, 144.553, 134.4873, 121.04661, 116.6064, 112.736, 112.6717, 98.253204, 90.5508,
      86.142, 81.494, 79.1909, 76.292404, 74.0447, 73.8424, 73.1722, 72.6085, 72.4809, 70.5348, 68.5808, 67.4259, 66.357,
      65.3586, 62.2596, 61.9674, 61.3846, 60.2805, 58.8572, 55.882, 55.5499, 54.1904, 53.1015, 52.1937, 51.3014, 51.1872,
      48.2315, 47.2289, 44.4493, 42.9784, 42.4408, 39.9909, 37.2411, 37.1224, 36.5963, 34.264458, 33.899498, 33.8277,
      32.29641, 31.80048, 30.9151, 30.0954, 26.4378, 26.36477, 26.1202, 26.10356, 25.9791, 25.6089, 20.8128, 20.0301,
      19.6854, 19.2363, 18.9538, 17.4534, 17.0523, 16.2213, 15.8468, 15.6676, 15.074, 14.7446, 13.6792, 12.6271)

    Elbow(y) shouldBe(List(2, 6))
  }

  behavior of "turning a list of elbow indices into a stream of elbow indicators"

  it should "work for empty elbow list" in {
    (0 until 5)
      .zip(toElbowGroups(Nil))
      .toList shouldBe List.tabulate(5)(i => (i, None))
  }

  it should "work for 1 elbow" in {
    (0 until 5)
      .zip(toElbowGroups(2 :: Nil))
      .toList shouldBe
      List(
        (0, Some(0)),
        (1, Some(0)),
        (2, Some(0)),
        (3, None),
        (4, None))
  }

  it should "work for 2 elbows" in {
    (0 until 5)
      .zip(toElbowGroups(1 :: 3 :: Nil))
      .toList shouldBe
      List(
        (0, Some(0)),
        (1, Some(0)),
        (2, Some(1)),
        (3, Some(1)),
        (4, None))
  }

}